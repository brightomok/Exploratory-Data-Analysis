results
#hosp <- results[c(TRUE,FALSE)]
#state <- results[c(FALSE,TRUE)]
#all <- data.frame(hosp,state)
#names(all) <- c("Hospital.Name", "state")
#all
}
head(rankall("heart attack", 20), 10)
hosp_sort <- function(state,outcome){
#setting NA to be 0
rates[rates == "Not Available"] <- 0
index <- c(grep("^Hospital.*Death*", names(rates)))
mortality_rates <- rates[,c(2,7,index)]
names(mortality_rates)[3:5] <- c("heart attack", "heart failure", "pneumonia")
#Making rates numeric
mortality_rates[,3:5] <- apply(mortality_rates[,3:5],2,as.numeric)
mortality_rates[mortality_rates == 0] <- NA
selected_state <- mortality_rates[mortality_rates$State == state,]
order_selected <- arrange(selected_state, selected_state[,outcome], Hospital.Name, na.last=TRUE)
order_selected <- order_selected[complete.cases(order_selected[,outcome]),]
return(order_selected)
#na.omit(selected_state[order(c(selected_state[,outcome]), na.last = TRUE),])
}
best <- function(state, outcome, st = "a") {
if (!state %in% unique(rates$State))
return("Invalid State")
if (!outcome %in% c("heart attack", "heart failure", "pneumonia"))
return("Invalid Outcome")
order_selected <- hosp_sort(state,outcome)
if (st = FALSE){
return(order_selected[1,1])}
else if (st = TRUE){
return(order_selected[1,c(1,2)]}
}
hosp_sort <- function(state,outcome){
#setting NA to be 0
rates[rates == "Not Available"] <- 0
index <- c(grep("^Hospital.*Death*", names(rates)))
mortality_rates <- rates[,c(2,7,index)]
names(mortality_rates)[3:5] <- c("heart attack", "heart failure", "pneumonia")
#Making rates numeric
mortality_rates[,3:5] <- apply(mortality_rates[,3:5],2,as.numeric)
mortality_rates[mortality_rates == 0] <- NA
selected_state <- mortality_rates[mortality_rates$State == state,]
order_selected <- arrange(selected_state, selected_state[,outcome], Hospital.Name, na.last=TRUE)
order_selected <- order_selected[complete.cases(order_selected[,outcome]),]
return(order_selected)
#na.omit(selected_state[order(c(selected_state[,outcome]), na.last = TRUE),])
}
best <- function(state, outcome, st = "a") {
if (!state %in% unique(rates$State))
return("Invalid State")
if (!outcome %in% c("heart attack", "heart failure", "pneumonia"))
return("Invalid Outcome")
order_selected <- hosp_sort(state,outcome)
if (st = FALSE){
return(order_selected[1,1])}
else if (st = TRUE){
return(order_selected[1,c(1,2)])}
}
hosp_sort <- function(state,outcome){
#setting NA to be 0
rates[rates == "Not Available"] <- 0
index <- c(grep("^Hospital.*Death*", names(rates)))
mortality_rates <- rates[,c(2,7,index)]
names(mortality_rates)[3:5] <- c("heart attack", "heart failure", "pneumonia")
#Making rates numeric
mortality_rates[,3:5] <- apply(mortality_rates[,3:5],2,as.numeric)
mortality_rates[mortality_rates == 0] <- NA
selected_state <- mortality_rates[mortality_rates$State == state,]
order_selected <- arrange(selected_state, selected_state[,outcome], Hospital.Name, na.last=TRUE)
order_selected <- order_selected[complete.cases(order_selected[,outcome]),]
return(order_selected)
#na.omit(selected_state[order(c(selected_state[,outcome]), na.last = TRUE),])
}
best <- function(state, outcome, st = "a") {
if (!state %in% unique(rates$State))
return("Invalid State")
if (!outcome %in% c("heart attack", "heart failure", "pneumonia"))
return("Invalid Outcome")
order_selected <- hosp_sort(state,outcome)
if (st == FALSE){
return(order_selected[1,1])}
else if (st == TRUE){
return(order_selected[1,c(1,2)])}
}
worst <- function(state, outcome, st = "a") {
if (!state %in% unique(rates$State))
return("Invalid State")
if (!outcome %in% c("heart attack", "heart failure", "pneumonia"))
return("Invalid Outcome")
order_selected <- hosp_sort(state,outcome)
if (st == FALSE){
return(order_selected[nrow(order_selected),1])}
else if (st == TRUE){
return(order_selected[nrow(order_selected),c(1,2)])}
}
rankhospital <- function(state, outcome, num = "best", st = FALSE){
if (num == "best")
return(best(state,outcome))
if (num == "worst")
return(worst(state,outcome))
else {order_selected <- hosp_sort(state,outcome)
if (st = FALSE){
return(order_selected[num,1])}
else if (st = TRUE){
return(order_selected[num,c(1,2)])}
}
}
worst <- function(state, outcome, st = "a") {
if (!state %in% unique(rates$State))
return("Invalid State")
if (!outcome %in% c("heart attack", "heart failure", "pneumonia"))
return("Invalid Outcome")
order_selected <- hosp_sort(state,outcome)
if (st == FALSE){
return(order_selected[nrow(order_selected),1])}
else if (st == TRUE){
return(order_selected[nrow(order_selected),c(1,2)])}
}
rankhospital <- function(state, outcome, num = "best", st = FALSE){
if (num == "best")
return(best(state,outcome))
if (num == "worst")
return(worst(state,outcome))
else {order_selected <- hosp_sort(state,outcome)
if (st == FALSE){
return(order_selected[num,1])}
else if (st == TRUE){
return(order_selected[num,c(1,2)])}
}
}
rankall <- function(outcome, num = "best") {
#print(lapply(unique(rates$State),hosp_sort, outcome))
results <- unlist(lapply(sort(unique(rates$State)), rankhospall, outcome, num, st = TRUE),use.names=FALSE)
hosp <- results[c(TRUE,FALSE)]
state <- results[c(FALSE,TRUE)]
all <- data.frame(hosp,state)
names(all) <- c("Hospital.Name", "state")
all
}
head(rankall("heart attack", 20), 10)
rankhospital <- function(state, outcome, num = "best", st = FALSE){
if (num == "best")
return(best(state,outcome,st))
if (num == "worst")
return(worst(state,outcome,st))
else {order_selected <- hosp_sort(state,outcome)
if (st == FALSE){
return(order_selected[num,1])}
else if (st == TRUE){
return(order_selected[num,c(1,2)])}
}
}
head(rankall("heart attack", 20), 10)
head(rankall("heart attack", 20), 10)
get_vector <- function(state, outcome, num = "best") {
## Check that state and outcome are valid
statesort <- state[order(state[outcome], state[2]),]
if (num == "best") {num <- 1}
if (num == "worst") {
num <- nrow(statesort)
ret <- statesort[num, 2]
return(ret)
num = "worst"}
else{
ret <- statesort[num, 2]
return(ret)
}
## Return hospital name in that state with the given rank
## 30-day death rate
}
num_helper <- function(state_subset, col_num, num) {
# get "attack", "failure" and "pneumonia" vector
outcome_arr <- as.numeric(state_subset[, col_num])
len <- dim(state_subset[!is.na(outcome_arr), ])[1]
if (num == "best") {
rank <- rank_helper(state_subset, outcome_arr, 1)
} else if (num == "worst") {
rank <- rank_helper(state_subset, outcome_arr, len)
} else if (num > len) {
rank <- NA
} else {
rank <- rank_helper(state_subset, outcome_arr, num)
}
result <- rank
return(result)
}
rankall <- function(outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- sort(unique(data[, 7]))
hospital <- rep("", length(states))
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!outcome %in% outcomes) {
stop("invalid outcome")
}
for (i in (1:length(states))) {
state_subset <- data[data[, 7] == states[i], ]
if (outcome == "heart attack") {
hospital[i] <- rankhospital(states[i], 11, num)
}
if (outcome == "heart failure") {
hospital[i] <- rankhospital(states[i], 17, num)
}
if (outcome == "pneumonia") {
hospital[i] <- rankhospital(states[i], 23, num)
}
}
df <- data.frame(hospital=hospital, state=states)
}
head(rankall("heart attack", 20), 10)
get_vector <- function(state, outcome, num = "best") {
## Check that state and outcome are valid
statesort <- state[order(state[outcome], state[2]),]
if (num == "best") {num <- 1}
if (num == "worst") {
num <- nrow(statesort)
ret <- statesort[num, 2]
return(ret)
num = "worst"}
else{
ret <- statesort[num, 2]
return(ret)
}
## Return hospital name in that state with the given rank
## 30-day death rate
}
num_helper <- function(state_subset, col_num, num) {
# get "attack", "failure" and "pneumonia" vector
outcome_arr <- as.numeric(state_subset[, col_num])
len <- dim(state_subset[!is.na(outcome_arr), ])[1]
if (num == "best") {
rank <- rank_helper(state_subset, outcome_arr, 1)
} else if (num == "worst") {
rank <- rank_helper(state_subset, outcome_arr, len)
} else if (num > len) {
rank <- NA
} else {
rank <- rank_helper(state_subset, outcome_arr, num)
}
result <- rank
return(result)
}
rankall <- function(outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- sort(unique(data[, 7]))
hospital <- rep("", length(states))
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!outcome %in% outcomes) {
stop("invalid outcome")
}
for (i in (1:length(states))) {
state_subset <- data[data[, 7] == states[i], ]
if (outcome == "heart attack") {
hospital[i] <- rankhospital(states[i], 11, num)
}
if (outcome == "heart failure") {
hospital[i] <- rankhospital(states[i], 17, num)
}
if (outcome == "pneumonia") {
hospital[i] <- rankhospital(states[i], 23, num)
}
}
df <- data.frame(hospital=hospital, state=states)
}
head(rankall("heart attack", 20), 10)
rm(list = ls())
get_vector <- function(state, outcome, num = "best") {
## Check that state and outcome are valid
statesort <- state[order(state[outcome], state[2]),]
if (num == "best") {num <- 1}
if (num == "worst") {
num <- nrow(statesort)
ret <- statesort[num, 2]
return(ret)
num = "worst"}
else{
ret <- statesort[num, 2]
return(ret)
}
## Return hospital name in that state with the given rank
## 30-day death rate
}
num_helper <- function(state_subset, col_num, num) {
# get "attack", "failure" and "pneumonia" vector
outcome_arr <- as.numeric(state_subset[, col_num])
len <- dim(state_subset[!is.na(outcome_arr), ])[1]
if (num == "best") {
rank <- rank_helper(state_subset, outcome_arr, 1)
} else if (num == "worst") {
rank <- rank_helper(state_subset, outcome_arr, len)
} else if (num > len) {
rank <- NA
} else {
rank <- rank_helper(state_subset, outcome_arr, num)
}
result <- rank
return(result)
}
rankall <- function(outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- sort(unique(data[, 7]))
hospital <- rep("", length(states))
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!outcome %in% outcomes) {
stop("invalid outcome")
}
for (i in (1:length(states))) {
state_subset <- data[data[, 7] == states[i], ]
if (outcome == "heart attack") {
hospital[i] <- rankhospital(states[i], 11, num)
}
if (outcome == "heart failure") {
hospital[i] <- rankhospital(states[i], 17, num)
}
if (outcome == "pneumonia") {
hospital[i] <- rankhospital(states[i], 23, num)
}
}
df <- data.frame(hospital=hospital, state=states)
}
head(rankall("heart attack", 20), 10)
rankhospital <- function(state, outcome, num = "best") {
## Read outcome data
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- unique(data[, 7])
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!state %in% states) {
stop("invalid state")
}
if (!outcome %in% outcomes) {
stop("invalid outcome")
}
if (outcome == "heart attack") {
outcome <- 11
}
if (outcome == "heart failure") {
outcome <- 17
}
if (outcome == "pneumonia") {
outcome <- 23
}
data[, 11] <- suppressWarnings(as.numeric(data[, 11])) # heart attack
data[, 17] <- suppressWarnings(as.numeric(data[, 17])) # heart failure
data[, 23] <- suppressWarnings(as.numeric(data[, 23])) # pneumonia
stateframe <- data[data[, 7] == state, ]
statesort <- stateframe[order(stateframe[outcome], stateframe[2]),]
if (num == "best") {num <- 1}
if (num == "worst") {
num <- nrow(statesort)
ret <- c(statesort[num, 2], state)
return(ret)
num = "worst"}
else{
ret <- c(statesort[num, 2], state)
return(ret)
}
## Return hospital name in that state with the given rank
## 30-day death rate
}
rankall <- function(outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- sort(unique(data[, 7]))
mat <- matrix(, nrow = 0, ncol = 2)
hospital <- rep("", length(states))
for (i in (1:length(states))) {
out <- matrix(rankhospital(states[i], outcome, num), ncol = 2)
mat <- rbind(mat, out)
}
mat
}
head(rankall("heart attack", 20), 10)
get_vector <- function(state, outcome, num = "best") {
## Check that state and outcome are valid
statesort <- state[order(state[outcome], state[2]),]
if (num == "best") {num <- 1}
if (num == "worst") {
num <- nrow(statesort)
ret <- statesort[num, 2]
return(ret)
num = "worst"}
else{
ret <- statesort[num, 2]
return(ret)
}
## Return hospital name in that state with the given rank
## 30-day death rate
}
num_helper <- function(state_subset, col_num, num) {
# get "attack", "failure" and "pneumonia" vector
outcome_arr <- as.numeric(state_subset[, col_num])
len <- dim(state_subset[!is.na(outcome_arr), ])[1]
if (num == "best") {
rank <- rank_helper(state_subset, outcome_arr, 1)
} else if (num == "worst") {
rank <- rank_helper(state_subset, outcome_arr, len)
} else if (num > len) {
rank <- NA
} else {
rank <- rank_helper(state_subset, outcome_arr, num)
}
result <- rank
return(result)
}
rankall <- function(outcome, num = "best") {
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
## Check that state and outcome are valid
states <- sort(unique(data[, 7]))
hospital <- rep("", length(states))
outcomes <- c("heart attack", "heart failure", "pneumonia")
if (!outcome %in% outcomes) {
stop("invalid outcome")
}
for (i in (1:length(states))) {
state_subset <- data[data[, 7] == states[i], ]
if (outcome == "heart attack") {
hospital[i] <- rankhospital(states[i], 11, num)
}
if (outcome == "heart failure") {
hospital[i] <- rankhospital(states[i], 17, num)
}
if (outcome == "pneumonia") {
hospital[i] <- rankhospital(states[i], 23, num)
}
}
df <- data.frame(hospital=hospital, state=states)
}
head(rankall("heart attack", 20), 10)
setwd("~/git/Coursera/Getting and Cleaning Data/Projects")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", desfile = "temp")
download.file("https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip", destfile = "temp")
unzip("temp")
ls
ls()
list.files()
rm(list=ls)
rm(list=ls())
list.files("UCI HAR Dataset")
setwd("~/git/Coursera/Exploratory Data Analysis/Projects")
?read.table
temp <- tempfile()
download <- download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",temp)
unz(temp, download)
unlink(temp)
hpc <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, na.strings = "?")
#loaded file into table with header and ; separators and the given na value as a string
hpc$Date <- as.Date(hpc$Date, "%d/%m/%Y")
hpc_sub <- subset(hpc, Date >= as.Date("2007-02-01") & Date <= as.Date("2007-02-02"))
#sub stands for subset using the given dates
#Plot below here
hist(hpc_sub$Global_active_power, col = "red", xlab = "Global Active Power (kilowatts)", ylab = "Frequency", main = "Global Active Power", breaks = 13, ylim = c(0,1200), xlim = c(0, 6))
list.files()
download <- download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",destfile = "temp")
unzip(temp)
unlink(temp)
download <- download.file("https://d396qusza40orc.cloudfront.net/exdata%2Fdata%2Fhousehold_power_consumption.zip",destfile = "temp")
unzip("temp")
unlink(temp)
hpc <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, na.strings = "?")
head(hpc)
hpc$Date <- as.Date(hpc$Date, "%d/%m/%Y")
hpc_sub <- subset(hpc, Date >= as.Date("2007-02-01") & Date <= as.Date("2007-02-02"))
hist(hpc_sub$Global_active_power, col = "red", xlab = "Global Active Power (kilowatts)", ylab = "Frequency", main = "Global Active Power", breaks = 13, ylim = c(0,1200), xlim = c(0, 6))
length(hpc$Date)
length(hpc_sub$Date)
length(hpc_sub$Date)
length(hpc_sub$Global_active_power)
length(hpc_sub$dt)
?strptime
hpc$dt
paste(hpc$Date, hpc$Time)
hpc$dt
hpc_sub
hpc$dt <- paste(hpc_sub$Date, hpc_sub$Time)
hpc_sub$dt <- paste(hpc_sub$Date, hpc_sub$Time)
strptime(hpc_sub$dt,"%d/%m/%Y %H:%M:%S")
strptime(hpc$dt,"%Y-%m%d %H:%M:%S")
strptime(hpc$dt,"%Y-%m-%d %H:%M:%S")
strptime(hpc$dt,"%Y%m%d %H:%M:%S")
hpc$Date <- as.Date(hpc$Date, "%d/%m/%Y") # for subsetting
hpc_sub <- subset(hpc, Date >= as.Date("2007-02-01") & "Date" <= as.Date("2007-02-02"))
hpc$dt <- strptime(paste(hpc$Date, hpc$Time), "%d/%m/%Y %H:%M:%S")
#Plot below here
png(filename = 'plot3.png', width = 480, height = 480)
plot(hpc_sub$dt, hpc_sub$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
points(hpc_sub$dt, hpc_sub$Sub_metering_2, type = "l", col = "red")
points(hpc_sub$dt, hpc_sub$Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
dev.off()
subSetData <- hpc[hpc$Date %in% c("1/2/2007","2/2/2007") ,]
dates <- hpc[hpc$Date %in% c("1/2/2007","2/2/2007") ,]
hpc <- as.numeric(dates$Global_active_power)
hist(hpc, col="red", main="Global Active Power", xlab="Global Active Power (kilowatts)")
rm(list=ls())
hpc <- read.table("household_power_consumption.txt", sep = ";", header = TRUE, na.strings = "?")
#loaded file into table with header and ; separators and the given na value as a string
hpc$Date <- as.Date(hpc$Date, "%d/%m/%Y")
hpc_sub <- subset(hpc, Date >= as.Date("2007-02-01") & Date <= as.Date("2007-02-02"))
#sub stands for subset using the given dates
#Plot below here
hist(hpc_sub$Global_active_power, col = "red", xlab = "Global Active Power (kilowatts)", ylab = "Frequency", main = "Global Active Power", breaks = 13, ylim = c(0,1200), xlim = c(0, 6))
hpc$dt <- strptime(paste(hpc$Date, hpc$Time), "%d/%m/%Y %H:%M:%S")
hpc_sub <- subset(hpc, Date >= as.Date("2007-02-01") & Date <= as.Date("2007-02-02"))
#sub stands for subset using the given dates
#Plot below here
plot(hpc_sub$dt, hpc_sub$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
?as.Date
